import logging
import os
import sys
import re
import zipfile
import pandas as pd
from typing import List, Dict, Optional
from docx import Document
from docx.text.paragraph import Paragraph
from docx.oxml import OxmlElement
from aiohttp import web
import asyncio


from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Update


from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import FSInputFile, BotCommand, ErrorEvent, Update
from aiogram.fsm.storage.memory import MemoryStorage

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ø–æ–ª–Ω—ã–π URL, –Ω–∞–ø—Ä–∏–º–µ—Ä https://yourdomain.com/webhook
WEBHOOK_PATH = "/webhook"
PORT = int(os.getenv("PORT", 10000))

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.error("BOT_TOKEN –∏–ª–∏ WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    sys.exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class GenDocs(StatesGroup):
    choosing_stage = State()
    waiting_excel = State()
    waiting_template = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–¥–∏–π ---
stage_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–î"), KeyboardButton(text="–†–î")]],
    resize_keyboard=True
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∏—Ç—É–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã?", reply_markup=stage_keyboard)
    await state.set_state(GenDocs.choosing_stage)

@router.message(GenDocs.choosing_stage, F.text.in_(["–ü–î", "–†–î"]))
async def choose_stage(message: types.Message, state: FSMContext):
    stage = message.text.strip()
    await state.update_data(stage=stage)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞–¥–∏—é: {stage}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª üìë")
    await state.set_state(GenDocs.waiting_excel)

@router.message(GenDocs.waiting_excel, F.document)
async def handle_excel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    stage = data.get("stage")

    file = await bot.get_file(message.document.file_id)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ---
    if not file.file_path.endswith(".xlsx"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    file_path = f"{stage}_data.xlsx"
    await bot.download_file(file.file_path, file_path)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è Excel ---
    try:
        if stage == "–ü–î":
            _ = pd.read_excel(file_path, usecols=[0, 1, 2])
        else:
            _ = pd.read_excel(file_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
        if os.path.exists(file_path):
            os.remove(file_path)
        return

    await state.update_data(excel_path=file_path)
    await message.answer("–§–∞–π–ª Excel –ø–æ–ª—É—á–µ–Ω ‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω Word (.docx)")
    await state.set_state(GenDocs.waiting_template)


@router.message(GenDocs.waiting_template, F.document)
async def handle_template(message: types.Message, state: FSMContext):
    data = await state.get_data()
    stage = data.get("stage")
    excel_path = data.get("excel_path")

    file = await bot.get_file(message.document.file_id)

    if not file.file_path.endswith(".docx"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Word-—à–∞–±–ª–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx")
        return

    template_path = f"{stage}_template.docx"
    await bot.download_file(file.file_path, template_path)

    try:
        _ = Document(template_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Word —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —à–∞–±–ª–æ–Ω Word. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
        if os.path.exists(template_path):
            os.remove(template_path)
        return

    try:
        if stage == "–ü–î":
            df = pd.read_excel(excel_path, usecols=[0, 1, 2])
            subtables = split_dataframe_PD(df)
            archive_name = create_word_for_each_row_PD(subtables, template_path, f"{stage}_docs.zip")
        else:
            df = pd.read_excel(excel_path)
            subtable = split_dataframe_RD(df)
            archive_name = create_word_for_each_row_RD(subtable, template_path, f"{stage}_docs.zip")

        await message.answer("–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ –í–æ—Ç –≤–∞—à –∞—Ä—Ö–∏–≤:")
        await message.answer_document(FSInputFile(archive_name))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in [excel_path, template_path, f"{stage}_docs.zip"]:
            if os.path.exists(file_path):
                os.remove(file_path)
        
        await state.clear()

@router.message(Command("help"))
async def help_cmd(message: types.Message):
    help_text = """
ü§ñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

1. –ù–∞–∂–º–∏—Ç–µ /start
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é (–ü–î –∏–ª–∏ –†–î)
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Word —à–∞–±–ª–æ–Ω

üìä **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ Excel —Ñ–∞–π–ª—É:**
- –î–ª—è –ü–î: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¢–æ–º, –®–∏—Ñ—Ä, –ß–∞—Å—Ç—å
- –î–ª—è –†–î: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –®–∏—Ñ—Ä, –†–∞–∑–¥–µ–ª

üìù **Word —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è –¥–ª—è –∑–∞–º–µ–Ω—ã:**
- –î–ª—è –ü–î: –ù–æ–º–µ—Ä, –ù–∞–∑–≤–∞–Ω–∏–µ —à–∏—Ñ—Ä–∞, –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏, –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞, –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
- –î–ª—è –†–î: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∏—Ñ—Ä–∞, –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
"""
    await message.answer(help_text)

    try:
        await message.answer_document(FSInputFile("examples/–°–æ—Å—Ç–∞–≤_–ü–î.xlsx"))
        await message.answer_document(FSInputFile("examples/–¢–∏—Ç—É–ª_–ü–î.docx"))
        await message.answer_document(FSInputFile("examples/–°–æ—Å—Ç–∞–≤_–†–î.xlsx"))
        await message.answer_document(FSInputFile("examples/–¢–∏—Ç—É–ª_–†–î.docx"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É examples/")


@dp.errors()
async def error_handler(event: ErrorEvent):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {event.exception}")
    
    if hasattr(event.update, 'message') and event.update.message:
        await event.update.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        state = dp.fsm.get_context(
            event.update.message.chat.id, 
            event.update.message.from_user.id
        )
        await state.clear()
        await event.update.message.answer("–î–ª—è –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∏—Ç—É–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã?", reply_markup=stage_keyboard)

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤"),
        BotCommand(command="help", description="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤"),
    ]
    await bot.set_my_commands(commands)








# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram ---
async def handle_webhook(request: web.Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    return web.Response(status=200)

# --- HTTP —Å–µ—Ä–≤–µ—Ä ---
async def start_webhook_app():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get("/", lambda request: web.Response(text="Bot is running"))
    app.router.add_get("/health", lambda request: web.Response(text="OK"))

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"Webhook server running on port {PORT}, path {WEBHOOK_PATH}")
    return runner

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —É Telegram ---
async def setup_webhook():
    await bot.delete_webhook()
    await bot.set_webhook(url=f"{WEBHOOK_URL}{WEBHOOK_PATH}")
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}{WEBHOOK_PATH}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    await setup_webhook()
    runner = await start_webhook_app()
    try:
        while True:
            await asyncio.sleep(3600)  # –¥–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞—é—â–∏–º
    finally:
        await runner.cleanup()
        await bot.session.close()












# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü ---
def split_dataframe_PD(df: pd.DataFrame) -> List[pd.DataFrame]:
    subtables = []
    third_col = df.columns[2]
    section_indices = df.index[df[third_col].astype(str).str.contains("–†–∞–∑–¥–µ–ª", case=True)].tolist()
    section_indices.append(len(df))

    for i in range(len(section_indices) - 1):
        start_idx, end_idx = section_indices[i], section_indices[i+1]
        section_name = str(df.iloc[start_idx, 2])
        section_df = df.iloc[start_idx+1:end_idx].reset_index(drop=True)

        subsection_indices = section_df.index[
            section_df[third_col].astype(str).str.contains("–ü–æ–¥—Ä–∞–∑–¥–µ–ª", case=False, na=False)
        ].tolist()
        subsection_indices.append(len(section_df))

        if len(subsection_indices) == 1:
            section_df.columns = ["–¢–æ–º", "–®–∏—Ñ—Ä", "–ß–∞—Å—Ç—å"]
            section_df["–†–∞–∑–¥–µ–ª"] = section_name
            section_df["–ü–æ–¥—Ä–∞–∑–¥–µ–ª"] = None
            subtables.append(section_df)
        else:
            for j in range(len(subsection_indices) - 1):
                sub_start_idx, sub_end_idx = subsection_indices[j], subsection_indices[j+1]
                subsection_name = str(section_df.iloc[sub_start_idx, 2])
                subsection_df = section_df.iloc[sub_start_idx+1:sub_end_idx].reset_index(drop=True)

                subsection_df.columns = ["–¢–æ–º", "–®–∏—Ñ—Ä", "–ß–∞—Å—Ç—å"]
                subsection_df["–†–∞–∑–¥–µ–ª"] = section_name
                subsection_df["–ü–æ–¥—Ä–∞–∑–¥–µ–ª"] = subsection_name
                subtables.append(subsection_df)

    return subtables


def split_dataframe_RD(df: pd.DataFrame) -> pd.DataFrame:
    second_col = df.columns[1]
    start_idx = df.index[
        df[second_col].astype(str).str.contains("–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", case=True)].tolist()[0]

    section_df = df.iloc[start_idx:]
    section_df = section_df[section_df[section_df.columns[0]].astype(str).str.len() > 7].reset_index(drop=True)
    section_df.columns = ["–®–∏—Ñ—Ä", "–†–∞–∑–¥–µ–ª"]

    return section_df


def replace_text_preserve_format_PD(doc: Document, replacements: Dict[str, Optional[str]]) -> None:
    none_keys = {key for key, value in replacements.items() if value is None}
    valid_replacements = {k: str(v) for k, v in replacements.items() if v is not None}

    part_text = str(replacements.get("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏", ""))
    word_count = len(part_text.split())
    allow_blank_insertion = word_count <= 12

    deleted_count = 0
    cipher_paragraphs = []

    for p in doc.paragraphs:
        for run in p.runs:
            if "–¢–æ–º" in run.text:
                cipher_paragraphs.append(p)
                break

    for p in reversed(doc.paragraphs):
        if any(key in p.text for key in none_keys):
            parent = p._element.getparent()
            if parent is not None:
                parent.remove(p._element)
            deleted_count += 1
        else:
            for run in p.runs:
                for key, value in valid_replacements.items():
                    if key in run.text:
                        run.text = run.text.replace(key, value)

    if allow_blank_insertion and deleted_count > 0 and cipher_paragraphs:
        for cipher_paragraph in cipher_paragraphs:
            if any(p._element == cipher_paragraph._element for p in doc.paragraphs):
                insert_blank_paragraphs_after(cipher_paragraph, 4)


def replace_text_preserve_format_RD(doc: Document, replacements: Dict[str, Optional[str]]) -> None:

    part_text = str(replacements.get("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞", ""))
    word_count = len(part_text.split())
    allow_blank_insertion = word_count <= 12

    for p in reversed(doc.paragraphs):
        for run in p.runs:
            for key, value in replacements.items():
                if key in run.text:
                    run.text = run.text.replace(key, value)

        if key == "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞" and allow_blank_insertion:
            insert_blank_paragraphs_after(p, 2)




def insert_blank_paragraphs_after(paragraph: Paragraph, count: int) -> None:
    for _ in range(count):
        new_p = OxmlElement('w:p')
        p_pr = OxmlElement('w:pPr')
        new_p.append(p_pr)
        paragraph._element.addnext(new_p)


def create_word_for_each_row_PD(subtables: List[pd.DataFrame], template_path: str, archive_name: str = "documents.zip") -> str:
    temp_files = []

    for _, subtable in enumerate(subtables, start=1):
        for _, row in subtable.iterrows():
            replacements = {
                "–ù–æ–º–µ—Ä": row.get("–¢–æ–º", ""),
                "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∏—Ñ—Ä–∞": row.get("–®–∏—Ñ—Ä", ""),
                "–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏": row.get("–ß–∞—Å—Ç—å", ""),
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": row.get("–†–∞–∑–¥–µ–ª", ""),
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞": row.get("–ü–æ–¥—Ä–∞–∑–¥–µ–ª", ""),
            }

            doc = Document(template_path)
            replace_text_preserve_format_PD(doc, replacements)

            safe_name = str(row.get("–®–∏—Ñ—Ä", "–±–µ–∑_—à–∏—Ñ—Ä–∞")) or "–±–µ–∑_—à–∏—Ñ—Ä–∞"
            safe_name = re.sub(r"[^–ê-–Ø–∞-—èA-Za-z0-9_]+", "_", safe_name)

            output_docx = f"{safe_name}.docx"
            doc.save(output_docx)
            temp_files.append(output_docx)

    with zipfile.ZipFile(archive_name, "w") as zipf:
        for f in temp_files:
            zipf.write(f)
            os.remove(f)

    return archive_name


def create_word_for_each_row_RD(subtable: pd.DataFrame, template_path: str, archive_name: str = "documents.zip") -> str:
    temp_files = []

    for _, row in subtable.iterrows():
        replacements = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∏—Ñ—Ä–∞": row.get("–®–∏—Ñ—Ä", ""),
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": row.get("–†–∞–∑–¥–µ–ª", ""),
        }

        doc = Document(template_path)
        replace_text_preserve_format_RD(doc, replacements)

        safe_name = str(row.get("–®–∏—Ñ—Ä", "–±–µ–∑_—à–∏—Ñ—Ä–∞")) or "–±–µ–∑_—à–∏—Ñ—Ä–∞"
        safe_name = re.sub(r"[^–ê-–Ø–∞-—èA-Za-z0-9_]+", "_", safe_name)

        output_docx = f"{safe_name}.docx"
        doc.save(output_docx)
        temp_files.append(output_docx)

    with zipfile.ZipFile(archive_name, "w") as zipf:
        for f in temp_files:
            zipf.write(f)
            os.remove(f)

    return archive_name


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")